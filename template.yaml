AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 90
    Environment:
      Variables:
        RDSSecretKey: !Ref RDSSecretKey

Parameters:

  DBInstanceIdentifier:
    Type: String
    Default: "isu-geo-db"

  DBName:
    Type: String
    Default: "isu_geo_db"

  RDSSecretKey:
    Type: String
    Default: "isu-geo-db"


Resources:

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS instance"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432  
          ToPort: 5432
          CidrIp: "0.0.0.0/0" 

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier    
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      PubliclyAccessible: true
      DBName: !Ref DBName
      MasterUsername: !Join [ "", [ "{{resolve:secretsmanager:", !Ref RDSSecretKey, ":SecretString:user}}" ] ]
      MasterUserPassword: !Join [ "", [ "{{resolve:secretsmanager:", !Ref RDSSecretKey, ":SecretString:password}}" ] ]
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "isu-geo-userpool"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

# set cognito domain
  # UserPoolDomain:
  #   Type: AWS::Cognito::UserPoolDomain
  #   Properties:
  #     Domain: "isu-geo-userpool"
  #     UserPoolId: !Ref UserPool


#set hosted UI
  # HostedUI:
  #   Type: AWS::Cognito::UserPoolUICustomizationAttachment
  #   Properties:
  #     ClientId: !Ref UserPoolClient
  #     UserPoolId: !Ref UserPool


  S3DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "isu-geo-data-dev"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedOrigins: ["*"]
            AllowedMethods: [GET, PUT, POST]      

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          APIAuthorizer:
            UserPoolArn: !GetAtt "UserPool.Arn"        

  GetSample:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: GetSample.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        PostEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/{sample_id}
            Method: GET
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - GetSample.ts

  ListSamples:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: ListSamples.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        PostEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples
            Method: GET
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - ListSamples.ts

  AddSample:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: AddSample.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - AddSample.ts

  BatchSampleUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: BatchSampleUpload.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonS3FullAccess
      Environment:
        Variables:
          HOST_NAME: !GetAtt RDS.Endpoint.Address
          DATA_BUCKET: !Ref S3DataBucket      
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/upload/batch
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - BatchSampleUpload.ts

  DeleteSample:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: DeleteSample.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/{sample_id}
            Method: DELETE
            Auth:
              Authorizer: APIAuthorizer
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - DeleteSample.ts



  SearchByLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: SearchByLocation.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/search/location
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - SearchByLocation.ts

  SearchByFilters:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: SearchByFilters.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/search/filters
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - SearchByFilters.ts


  SearchFulltext:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: SearchFulltext.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/search/fulltext
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - SearchFulltext.ts


  APILogin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: APILogin.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
      Environment:
        Variables:
          HOST_NAME: !GetAtt RDS.Endpoint.Address
          USER_POOL_CLIENT_ID: !GetAtt UserPoolClient.ClientId
          USER_POOL_ID: !Ref UserPool
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /api/login
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - APILogin.ts


  UILogin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: UILogin.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
      Environment:
        Variables:
          HOST_NAME: !GetAtt RDS.Endpoint.Address
          USER_POOL_CLIENT_ID: !GetAtt UserPoolClient.ClientId
          USER_POOL_ID: !Ref UserPool
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /ui/login
            Method: GET
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - UILogin.ts


  GetPresignedURL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: GetPresignedURL.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
        - AmazonS3FullAccess
      Environment:
        Variables:
          HOST_NAME: !GetAtt RDS.Endpoint.Address
          DATA_BUCKET: !Ref S3DataBucket      
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /presigned-url
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints: 
        - GetPresignedURL.ts

Outputs:
  RDSEndpoint:
    Description: RDS Endpoint
    Value: !Sub "${RDS.Endpoint.Address}:${RDS.Endpoint.Port}"
  ApiEndpoint:
    Description: URL of the API endpoint
    Value: !Sub https://${API}.execute-api.${AWS::Region}.amazonaws.com/prod/
 