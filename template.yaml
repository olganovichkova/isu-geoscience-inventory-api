AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 90
    Environment:
      Variables:
        STACK_BASE_NAME: !Ref StackBaseName
        DB_SECRET_KEY: !Ref DBSecretKey
        DB_HOST_NAME: !GetAtt RDS.Endpoint.Address
        DB_PORT: !GetAtt RDS.Endpoint.Port
        DB_NAME: !Ref DBName

Parameters:
  StackBaseName:
    Type: String
    Default: "isu-geo"

  StackEnvironment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment

  DBName:
    Type: String
    Default: "isu_geo_db"

  DBSecretKey:
    Type: String
    Default: "/isu-geo/default/postgres/credentials"

  WebAppRedirectURL:
    Type: String
    Default: "http://localhost:3000/login"

Resources:
  S3DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${StackBaseName}-data-${StackEnvironment}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedOrigins: ["*"]
            AllowedMethods: [GET, PUT, POST]

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for RDS instance"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: "0.0.0.0/0"

  RDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${StackBaseName}-db-${StackEnvironment}"
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      PubliclyAccessible: true
      DBName: !Ref DBName
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref DBSecretKey,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref DBSecretKey,
            ":SecretString:password}}",
          ],
        ]
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${StackBaseName}-userpool-${StackEnvironment}"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${StackBaseName}-${StackEnvironment}"
      UserPoolId: !Ref UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn:
      - UserPool
      - API
    Properties:
      ClientName: !Sub "${StackBaseName}-userpool-client-${StackEnvironment}"
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
      CallbackURLs:
        - !Sub https://${API}.execute-api.${AWS::Region}.amazonaws.com/${StackEnvironment}/ui/login
      SupportedIdentityProviders:
        - COGNITO

  API:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${StackBaseName}-apigateway-${StackEnvironment}"
      StageName: !Ref StackEnvironment
      Cors:
        AllowMethods: "'GET,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        Authorizers:
          APIAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  GetSample:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: GetSample.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        PostEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/{sample_id}
            Method: GET
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - GetSample.ts

  ListSamples:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: ListSamples.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        PostEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples
            Method: GET
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - ListSamples.ts

  AddSample:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: AddSample.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples
            Method: POST
            Auth:
              Authorizer: APIAuthorizer
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - AddSample.ts

  BatchSampleUpload:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: BatchSampleUpload.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonS3FullAccess
        - AmazonSSMReadOnlyAccess
      Environment:
        Variables:
          DATA_BUCKET: !Ref S3DataBucket
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/upload/batch
            Method: POST
            Auth:
              Authorizer: APIAuthorizer
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - BatchSampleUpload.ts

  DeleteSample:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: DeleteSample.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/{sample_id}
            Method: DELETE
            Auth:
              Authorizer: APIAuthorizer
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - DeleteSample.ts

  SearchByLocation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: SearchByLocation.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/search/location
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - SearchByLocation.ts

  SearchByFilters:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: SearchByFilters.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/search/filters
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - SearchByFilters.ts

  SearchFulltext:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: SearchFulltext.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /samples/search/fulltext
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - SearchFulltext.ts

  APILogin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: APILogin.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /api/login
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - APILogin.ts

  UILogin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: UILogin.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
        - AmazonSSMReadOnlyAccess
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /ui/login
            Method: GET
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - UILogin.ts

  GetPresignedURL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: GetPresignedURL.handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - SecretsManagerReadWrite
        - AmazonCognitoPowerUser
        - AmazonS3FullAccess
      Environment:
        Variables:
          DATA_BUCKET: !Ref S3DataBucket
      Runtime: nodejs20.x
      Events:
        GetEvent:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /presigned-url
            Method: POST
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - GetPresignedURL.ts

  UserPoolIdParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${StackBaseName}/${StackEnvironment}/userpool/id"
      Type: "String"
      Value: !Ref UserPool

  UserPoolClientIdParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${StackBaseName}/${StackEnvironment}/userpool/client/id"
      Type: "String"
      Value: !GetAtt UserPoolClient.ClientId

  UserPoolDomainParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${StackBaseName}/${StackEnvironment}/userpool/domain"
      Type: "String"
      Value: !Ref UserPoolDomain

  ApiEndPointParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${StackBaseName}/${StackEnvironment}/api/endpoint"
      Type: "String"
      Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/${StackEnvironment}"

  WebAppRedirectURLParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: !Sub "/${StackBaseName}/${StackEnvironment}/webapp/login/url"
      Type: "String"
      Value: !Ref WebAppRedirectURL

Outputs:
  RDSEndpoint:
    Description: RDS Endpoint
    Value: !Sub "${RDS.Endpoint.Address}:${RDS.Endpoint.Port}"
    Export:
      Name: !Sub "RDSEndpoint-${StackEnvironment}"

  APIEndpoint:
    Description: URL of the API endpoint
    Value: !Sub https://${API}.execute-api.${AWS::Region}.amazonaws.com/${StackEnvironment}/
    Export:
      Name: !Sub "APIEndpoint-${StackEnvironment}"
